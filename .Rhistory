get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## keep comment
# `cacheSolve`: This function computes the inverse of the special
# "matrix" returned by `makeCacheMatrix` above. If the inverse has
# already been calculated (and the matrix has not changed), then
# `cacheSolve` should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inv(data, ...)
x$setinv(m)
m
}
cmat<-matrix(c(2,3,2,2), nrow=2, ncol=2)
cmat
cmatc<-makeCacheMatrix(cmat)
cmatc
cmatc$get
cacheSolve(cmatc)
source('~/Coursera/ProgrammingAssignment12/cachematrix2.R')
cacheSolve(cmatc)
cacheSolve(cmatc)
source('~/Coursera/ProgrammingAssignment12/cachematrix2.R')
undebug(ls)
set.seed(1)
x<-rpois(5,2)
x
attributes(x)
is.vector(x)
?dnorm
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
Rprof()
library(datasets)
Rprof()
setwd("~/Coursera/ProgrammingAssignment3")
dir
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
View(outcome)
View(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
View(outcome)
View(outcome)
tab(state)
?tabulate
?freq
?frequency
?unique
unique(outcome$state)
unique(outcome$State)
states<-c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","GU")
"MA" %in% states
states<-c(unique(outcome$State))
states
?sort
subset<-outcome[,c(2,7,11,17,23)]
head subset
head(subset)
sub2<-subset[order(3,1)]
sub2
View(sub2)
sub2<-subset[order(3,1),]
View(sub2)
sub2<-subset[order(4,1),]
sub2
sub2<-subset[order(4,1)]
sub2<-subset[order(1,2),]
sub2
head(subset)
subset[order(1,3,]
subset[order(1,3),]
subset[,3]
sub2<-subset
outcome_state<-subset
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,Hospital.Name, na.last=TRUE),]
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,Outcome_State$Hospital.Name, na.last=TRUE),]
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,outcome_state$Hospital.Name, na.last=TRUE),]
View(subset)
x<-subset$Hospital.Name[1]
x
View(subset)
# setwd("~/Coursera/ProgrammingAssignment3")
#
# outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# head(outcome)
#
# outcome[, 11] <- as.numeric(outcome[, 11])
# hist(outcome[, 11])
best <- function(state, outcome) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
# states<-c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","GU")
states<-c(unique(outcome$State))
outcomes<c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
if(!(outcome %in% outcomes)) {
stop("invalid outcome")
}
## take a subset of the relevant data
outcome_state <- outcome[outcome$State %in% state,c(2,7,11,17,23)]
if(outcome=="heart attack") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
else if(outcome=="heart failure") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
else if(outcome=="pneumonia") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
x
## Return hospital name in that state with lowest 30-day death
## rate
#columns 11, 17, 23
# sort(x, na.last=TRUE)
}
best("TX", "heart attack")
# setwd("~/Coursera/ProgrammingAssignment3")
#
# outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# head(outcome)
#
# outcome[, 11] <- as.numeric(outcome[, 11])
# hist(outcome[, 11])
best <- function(state, outcome) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
# states<-c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","GU")
states<-c(unique(outcome$State))
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
if(!(outcome %in% outcomes)) {
stop("invalid outcome")
}
## take a subset of the relevant data
outcome_state <- outcome[outcome$State %in% state,c(2,7,11,17,23)]
if(outcome=="heart attack") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
else if(outcome=="heart failure") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
else if(outcome=="pneumonia") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
x
## Return hospital name in that state with lowest 30-day death
## rate
#columns 11, 17, 23
# sort(x, na.last=TRUE)
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
# states<-c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","GU")
states<-c(unique(outcome$State))
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
if(!(outcome %in% outcomes)) {
stop("invalid outcome")
}
outcome
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
# outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
# states<-c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","GU")
states<-c(unique(outcome$State))
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
#
#   if(!(outcome %in% outcomes)) {
#     stop("invalid outcome")
#   }
outcome
}
best("TX", "heart attack")
unique(outcome$State)
best <- function(state, outcome) {
## Read outcome data
# outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
# states<-c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","GU")
states<-unique(outcome$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
#
#   if(!(outcome %in% outcomes)) {
#     stop("invalid outcome")
#   }
outcome
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
# states<-c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","GU")
states<-unique(outcome$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
#
#   if(!(outcome %in% outcomes)) {
#     stop("invalid outcome")
#   }
outcome
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
outcome.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
# states<-c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","GU")
states<-unique(outcome.df$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
#
#   if(!(outcome %in% outcomes)) {
#     stop("invalid outcome")
#   }
outcome
}
best("TX", "heart attack")
best("BB", "heart attack")
best("MI", "heart attack")
best("MI", "heart condition")
best <- function(state, outcome) {
## Read outcome data
outcome.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
# states<-c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","GU")
states<-unique(outcome.df$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
if(!(outcome %in% outcomes)) {
stop("invalid outcome")
}
outcome
}
best("MI", "heart attack")
best("MI", "heart condition")
best <- function(state, outcome) {
## Read outcome data
outcome.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
# states<-c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","GU")
states<-unique(outcome.df$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
if(!(outcome %in% outcomes)) {
stop("invalid outcome")
}
outcome
## take a subset of the relevant data
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
if(outcome=="heart attack") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
else if(outcome=="heart failure") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
else if(outcome=="pneumonia") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
x
## Return hospital name in that state with lowest 30-day death
## rate
#columns 11, 17, 23
# sort(x, na.last=TRUE)
}
best("MI", "heart attack")
best("MI", "heart condition")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
# setwd("~/Coursera/ProgrammingAssignment3")
#
# outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# head(outcome)
#
# outcome[, 11] <- as.numeric(outcome[, 11])
# hist(outcome[, 11])
best <- function(state, outcome) {
## Read outcome data
outcome.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
# states<-c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","GU")
states<-unique(outcome.df$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
if(!(outcome %in% outcomes)) {
stop("invalid outcome")
}
outcome
## take a subset of the relevant data
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
if(outcome=="heart attack") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
else if(outcome=="heart failure") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
else if(outcome=="pneumonia") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
x
## Return hospital name in that state with lowest 30-day death
## rate
#columns 11, 17, 23
# sort(x, na.last=TRUE)
}
best("MD", "pneumonia")
state<-"MD"
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
outcome.df<-outcome
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
head(outcome_state)
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_state$Hospital.Name, na.last=TRUE),]
head(subset)
View(subset)
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, na.last=TRUE),]
head(subset)
# setwd("~/Coursera/ProgrammingAssignment3")
#
# outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# head(outcome)
#
# outcome[, 11] <- as.numeric(outcome[, 11])
# hist(outcome[, 11])
best <- function(state, outcome) {
## Read outcome data
outcome.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
# states<-c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","GU")
states<-unique(outcome.df$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
if(!(outcome %in% outcomes)) {
stop("invalid outcome")
}
outcome
## take a subset of the relevant data
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
if(outcome=="heart attack") {
ndx<-order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,outcome_state$Hospital.Name, na.last=TRUE)
subset<-outcome_state[ndx,]
x<-subset$Hospital.Name[1]
}
else if(outcome=="heart failure") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
else if(outcome=="pneumonia") {
ndx<-order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_state$Hospital.Name, na.last=TRUE)
subset<-outcome_state[ndx,]
x<-subset$Hospital.Name[1]
}
x
## Return hospital name in that state with lowest 30-day death
## rate
#columns 11, 17, 23
# sort(x, na.last=TRUE)
}
best("MD", "pneumonia")
xvext
xvect
max(xvect)
xvect<-[1:6,6:1]
xvect<-[c(1:6,6:1)]
xvect<-c(1:6,6:1)
xvect
xvecta<-max(xvect)
xvecta
test_state<-outcome_state
test_vect<-outcome_state[outcome_state$3==max(outcome_state$3), ]
test_vect<-outcome_state[outcome_state[,3] ==max(outcome_state[,3]), ]
text_vect
test_vect
test_vect<-outcome_state[rank(outcome_state[,3],na.last=True,ties.method=c("max"))==1, ]
test_vect<-outcome_state[rank(outcome_state[,3],na.last=TRUE,ties.method=c("max"))==1, ]
test_vect
test_vect<-outcome_state[rank(outcome_state[,3],na.last=TRUE,ties.method=c("max"))==1, 1]
test_vect
test_vect<-outcome_state[rank(outcome_state[,5],na.last=TRUE,ties.method=c("max"))==1, 1]
test_vect
test_vect<-outcome_state[rank(outcome_state[,5],na.last=TRUE,ties.method=c("min"))==1, 1]
test_vect
View(outcome_state)
is.numeric(outcome_state[4,4])
is.character(outcome_state[4,4])
is.character(outcome_state[4,5])
is.character(outcome_state[4,3])
outcome_state[-2] <- lapply(outcome_state[-2], as.numeric)
otucome_state
head(outcome_state)
outcome_state<-test_state
head(outcome_state)
outcome_state[-c(1,2)] <- lapply(outcome_state[-c(1,2)], as.numeric)
head(outcome_state)
is.character(outcome_state[4,3])
is.numeric(outcome_state[4,3])
# setwd("~/Coursera/ProgrammingAssignment3")
#
# outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# head(outcome)
#
# outcome[, 11] <- as.numeric(outcome[, 11])
# hist(outcome[, 11])
best <- function(state, outcome) {
## Read outcome data
outcome.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
# states<-c("AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","GU")
states<-unique(outcome.df$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
if(!(outcome %in% outcomes)) {
stop("invalid outcome")
}
## take a subset of the relevant data
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
outcome_state[-c(1,2)] <- lapply(outcome_state[-c(1,2)], as.numeric)
if(outcome=="heart attack") {
ndx<-order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,outcome_state$Hospital.Name, na.last=TRUE)
subset<-outcome_state[ndx,]
x<-subset$Hospital.Name[1]
}
else if(outcome=="heart failure") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
else if(outcome=="pneumonia") {
ndx<-order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_state$Hospital.Name, na.last=TRUE)
subset<-outcome_state[ndx,]
x<-subset$Hospital.Name[1]
}
x
## Return hospital name in that state with lowest 30-day death
## rate
#columns 11, 17, 23
# sort(x, na.last=TRUE)
}
best("MD", "pneumonia")
View(outcome_state)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
