setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x<-1:100
x
vec<-makeVector(x)
vec
vec$getmean()
mx<mean(x)
mx<-mean(x)
vec$setmean(mx)
vec$getmean()
cachemean(x)
x
vec
cachemean(vec)
vec2<-makevec(1:50)
vec2<-makeVector(1:50)
cachemean(vec2)
cachemean(vec2)
## Put comments here that give an overall description of what your
## functions do
# The first function, `makeVector` creates a special "vector", which is
# really a list containing a function to
#
# 1.  set the value of the vector
# 2.  get the value of the vector
# 3.  set the value of the mean
# 4.  get the value of the mean
#
# makeVector <- function(x = numeric()) {
#   m <- NULL
#   set <- function(y) {
#     x <<- y
#     m <<- NULL
#   }
#   get <- function() x
#   setmean <- function(mean) m <<- mean
#   getmean <- function() m
#   list(set = set, get = get,
#        setmean = setmean,
#        getmean = getmean)
# }
# mat2<-matrix(c(2,3,2,2), nrow=2, ncol=2)
## keep comment:
# `makeCacheMatrix`: This function creates a special "matrix" object
# that can cache the inverse of a matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## keep comment
# `cacheSolve`: This function computes the inverse of the special
# "matrix" returned by `makeCacheMatrix` above. If the inverse has
# already been calculated (and the matrix has not changed), then
# `cacheSolve` should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inv(data, ...)
x$setinv(m)
m
}
cmat<-matrix(c(2,3,2,2), nrow=2, ncol=2)
cmat
cmatc<-makeCacheMatrix(cmat)
cmatc
cmatc$get
cacheSolve(cmatc)
source('~/Coursera/ProgrammingAssignment12/cachematrix2.R')
cacheSolve(cmatc)
cacheSolve(cmatc)
source('~/Coursera/ProgrammingAssignment12/cachematrix2.R')
undebug(ls)
set.seed(1)
rpois(5,2)
x<-rpois(5,2)
attrib(x)
attr(x)
attributes(x)
q)(
q()
savehistory("C:/Users/crodger/Desktop/junk.r")
setwd("~/Coursera/ProgrammingAssignment3")
outcome.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome.df)
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
outcome_state[-c(1,2)] <- lapply(outcome_state[-c(1,2)], as.numeric)
state<-MD
state<-"MD"
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
outcome_state[-c(1,2)] <- lapply(outcome_state[-c(1,2)], as.numeric)
vect<-c(4,3,NA,1)
vect
rank(vect)
rank(vect,na.last=NA)
ndx<-rank(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_state$Hospital.Name, na.last=NA)
ndx<-rank(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, na.last=NA)
ndx<-rank(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_state$Hospital.Name, na.last=NA)
ndx<-rank(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, na.last=NA)
ndx
ndx<-rank(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, ties.method="min", na.last=NA)
ndx
vect2<-vect[rank(vect,na.last=NA)]
vect
vect2
outcome_state_sub<-outcome_state[,1:3]
head(outcome_state_sub)
attributes(outcome_state_sub)
outcome_state_sub<-outcome_state_sub[complete.cases(outcome_state_sub),]
attributes(outcome_state_sub)
ndx<-rank(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, ties.method="min", na.last=NA)
ndx
ndx<-rank(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, ties.method="min", na.last=NA)
ndx
subset<-outcome_state_sub[ndx,]
View(subset)
x<-subset$Hospital.Name[1]
x
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcome.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states<-unique(outcome.df$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
if(!(outcome %in% outcomes)) {
stop("invalid outcome")
}
## Return hospital name in that state with the given rank
## take a subset of the relevant data
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
outcome_state[-c(1,2)] <- lapply(outcome_state[-c(1,2)], as.numeric)
if(outcome=="heart attack") {
outcome_state_sub<-outcome_state[,1:3]
outcome_state_sub<-outcome_state_sub[complete.cases(outcome_state_sub),]
ndx<-rank(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, ties.method="min", na.last=NA)
subset<-outcome_state_sub[ndx,]
x<-subset$Hospital.Name[1]
}
else if(outcome=="heart failure") {
subset<-outcome_state[order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,outcome_state$Hospital.Name, na.last=TRUE),]
x<-subset$Hospital.Name[1]
}
else if(outcome=="pneumonia") {
ndx<-order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_state$Hospital.Name, na.last=TRUE)
subset<-outcome_state[ndx,]
x<-subset$Hospital.Name[1]
}
x
}
rankhospital("MD","heart attack",1)
rankhospital("MD","heart attack",5)
outcome.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states<-unique(outcome.df$State)
outcomes<-c("heart attack","heart failure","pneumonia")
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
outcome_state[-c(1,2)] <- lapply(outcome_state[-c(1,2)], as.numeric)
View(outcome_state)
outcome_state_sub<-outcome_state[,1:3]
outcome_state_sub<-outcome_state_sub[complete.cases(outcome_state_sub),]
View(outcome_state_sub)
ndx<-rank(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, ties.method="min", na.last=NA)
ndx<-rank(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, ties.method="min", na.last=NA)
ndx
subset<-outcome_state_sub[ndx,]
View(subset)
View(outcome_state_sub)
View(outcome_state)
outcome_state[1,1]
ndx<-order(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, outcome_state_sub$Hospital.Name, na.last=TRUE)
ndx<-order(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcome_state_sub$Hospital.Name, na.last=TRUE)
ndx
subset<-outcome_state_sub[ndx,]
View(subset)
View(subset)
ndx<-rank(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, ties.method="min", na.last=NA)
ndx
View(outcome_state_sub)
ndx<-rank(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, ties.method="first", na.last=NA)
ndx
ndx<-rank(subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, ties.method="first", na.last=NA)
ndx
ndx<-rank(subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, ties.method="min", na.last=NA)
ndx
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcome.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states<-unique(outcome.df$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
if(!(outcome %in% outcomes)) {
stop("invalid outcome")
}
if(num=="best") {
num<-1
}
# if(!(num %in% c("best","worst",1:nobs(Hospital.Name)))) {
#     stop("")
# }
## Return hospital name in that state with the given rank
## take a subset of the relevant data
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
outcome_state[-c(1,2)] <- lapply(outcome_state[-c(1,2)], as.numeric)
if(num>nobs(outcome_state$Hospital.Name)) {
x<-"NA"
}
else if(outcome=="heart attack") {
outcome_state_sub<-outcome_state[,1:3]
outcome_state_sub<-outcome_state_sub[complete.cases(outcome_state_sub),]
ndx<-order(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcome_state_sub$Hospital.Name, na.last=TRUE)
subset<-outcome_state_sub[ndx,]
if(num=="worst") {
num<-nobs(ndx)
}
x<-subset$Hospital.Name[num]
}
else if(outcome=="heart failure") {
outcome_state_sub<-outcome_state[,c(1,2,4)]
outcome_state_sub<-outcome_state_sub[complete.cases(outcome_state_sub),]
ndx<-order(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcome_state_sub$Hospital.Name, na.last=TRUE)
subset<-outcome_state_sub[ndx,]
if(num=="worst") {
num<-nobs(ndx)
}
x<-subset$Hospital.Name[num]
}
else if(outcome=="pneumonia") {
outcome_state_sub<-outcome_state[,c(1,2,5)]
ndx<-order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_state$Hospital.Name, na.last=TRUE)
subset<-outcome_state[ndx,]
if(num=="worst") {
num<-nobs(ndx)
}
x<-subset$Hospital.Name[num]
}
x
}
rankhospital("MD","pneumonia")
nobs(outcome_state$Hospital.Name
nobs(outcome_state$Hospital.Name)
nobs(outcome_state[3])
head(outcome_state)
nobs(outcome_state)
nobs(outcome_state[,4])
?nobs
nrow(outcome_state[,4])
nrow(outcome_state)
nrow(outcome_state[1,4])
ndx
nrow(ndx)
ncol
ncol(ndx)
length(ndx)
if(num=="worst") {
num<-length(ndx)
}
num<-"worst"
if(num=="worst") {
num<-length(ndx)
}
num
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcome.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states<-unique(outcome.df$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
if(!(outcome %in% outcomes)) {
stop("invalid outcome")
}
if(num=="best") {
num<-1
}
# if(!(num %in% c("best","worst",1:nobs(Hospital.Name)))) {
#     stop("")
# }
## Return hospital name in that state with the given rank
## take a subset of the relevant data
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
outcome_state[-c(1,2)] <- lapply(outcome_state[-c(1,2)], as.numeric)
if(num>nrow(outcome_state)) {
x<-"NA"
}
else if(outcome=="heart attack") {
outcome_state_sub<-outcome_state[,1:3]
outcome_state_sub<-outcome_state_sub[complete.cases(outcome_state_sub),]
ndx<-order(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcome_state_sub$Hospital.Name, na.last=TRUE)
subset<-outcome_state_sub[ndx,]
if(num=="worst") {
num<-length(ndx)
}
x<-subset$Hospital.Name[num]
}
else if(outcome=="heart failure") {
outcome_state_sub<-outcome_state[,c(1,2,4)]
outcome_state_sub<-outcome_state_sub[complete.cases(outcome_state_sub),]
ndx<-order(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcome_state_sub$Hospital.Name, na.last=TRUE)
subset<-outcome_state_sub[ndx,]
if(num=="worst") {
num<-length(ndx)
}
x<-subset$Hospital.Name[num]
}
else if(outcome=="pneumonia") {
outcome_state_sub<-outcome_state[,c(1,2,5)]
ndx<-order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_state$Hospital.Name, na.last=TRUE)
subset<-outcome_state[ndx,]
if(num=="worst") {
num<-length(ndx)
}
x<-subset$Hospital.Name[num]
}
x
}
rankhospital("MD","pneumonia")
rankhospital("MD","pneumonia",5)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
q
Q
exit
1
rankhospital("NC","heart attack","worst")
head(outcome_state_sub)
outcome.df
State="NC"
state="NC"
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
outcome_state[-c(1,2)] <- lapply(outcome_state[-c(1,2)], as.numeric)
outcome_state
head(outcome_state)
rankhospital("NC","heart attack","worst")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcome.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states<-unique(outcome.df$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
if(!(outcome %in% outcomes)) {
stop("invalid outcome")
}
if(num=="best") {
num<-1
}
# if(!(num %in% c("best","worst",1:nobs(Hospital.Name)))) {
#     stop("")
# }
## Return hospital name in that state with the given rank
## take a subset of the relevant data
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
outcome_state[-c(1,2)] <- lapply(outcome_state[-c(1,2)], as.numeric)
else if(outcome=="heart attack") {
outcome_state_sub<-outcome_state[,1:3]
outcome_state_sub<-outcome_state_sub[complete.cases(outcome_state_sub),]
ndx<-order(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcome_state_sub$Hospital.Name, na.last=TRUE)
subset<-outcome_state_sub[ndx,]
if(num=="worst") {
num<-length(ndx)
}
if(num>length(ndx)) {
x<-"NA"
}
else {
x<-subset$Hospital.Name[num]
}
}
else if(outcome=="heart failure") {
outcome_state_sub<-outcome_state[,c(1,2,4)]
outcome_state_sub<-outcome_state_sub[complete.cases(outcome_state_sub),]
ndx<-order(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcome_state_sub$Hospital.Name, na.last=TRUE)
subset<-outcome_state_sub[ndx,]
if(num=="worst") {
num<-length(ndx)
}
if(num>length(ndx)) {
x<-"NA"
}
else {
x<-subset$Hospital.Name[num]
}
}
else if(outcome=="pneumonia") {
outcome_state_sub<-outcome_state[,c(1,2,5)]
ndx<-order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_state$Hospital.Name, na.last=TRUE)
subset<-outcome_state[ndx,]
if(num=="worst") {
num<-length(ndx)
}
if(num>length(ndx)) {
x<-"NA"
}
else {
x<-subset$Hospital.Name[num]
}
}
x
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcome.df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states<-unique(outcome.df$State)
outcomes<-c("heart attack","heart failure","pneumonia")
if(!(state %in% states)) {
stop("invalid state")
}
if(!(outcome %in% outcomes)) {
stop("invalid outcome")
}
if(num=="best") {
num<-1
}
# if(!(num %in% c("best","worst",1:nobs(Hospital.Name)))) {
#     stop("")
# }
## Return hospital name in that state with the given rank
## take a subset of the relevant data
outcome_state <- outcome.df[outcome.df$State %in% state,c(2,7,11,17,23)]
outcome_state[-c(1,2)] <- lapply(outcome_state[-c(1,2)], as.numeric)
if(outcome=="heart attack") {
outcome_state_sub<-outcome_state[,1:3]
outcome_state_sub<-outcome_state_sub[complete.cases(outcome_state_sub),]
ndx<-order(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcome_state_sub$Hospital.Name, na.last=TRUE)
subset<-outcome_state_sub[ndx,]
if(num=="worst") {
num<-length(ndx)
}
if(num>length(ndx)) {
x<-"NA"
}
else {
x<-subset$Hospital.Name[num]
}
}
else if(outcome=="heart failure") {
outcome_state_sub<-outcome_state[,c(1,2,4)]
outcome_state_sub<-outcome_state_sub[complete.cases(outcome_state_sub),]
ndx<-order(outcome_state_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, outcome_state_sub$Hospital.Name, na.last=TRUE)
subset<-outcome_state_sub[ndx,]
if(num=="worst") {
num<-length(ndx)
}
if(num>length(ndx)) {
x<-"NA"
}
else {
x<-subset$Hospital.Name[num]
}
}
else if(outcome=="pneumonia") {
outcome_state_sub<-outcome_state[,c(1,2,5)]
ndx<-order(outcome_state$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,outcome_state$Hospital.Name, na.last=TRUE)
subset<-outcome_state[ndx,]
if(num=="worst") {
num<-length(ndx)
}
if(num>length(ndx)) {
x<-"NA"
}
else {
x<-subset$Hospital.Name[num]
}
}
x
}
rankhospital("NC","heart attack","worst")
rankhospital("NC","heart attack","best")
rankhospital("NC","heart attack",10)
rankhospital("NC","heart attack",1000)
submit()
submit()
submit()
submit()
q()
